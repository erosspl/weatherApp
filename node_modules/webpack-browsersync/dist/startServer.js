'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _browserSync = require('browser-sync');

var _browserSync2 = _interopRequireDefault(_browserSync);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _webpackDevMiddleware = require('webpack-dev-middleware');

var _webpackDevMiddleware2 = _interopRequireDefault(_webpackDevMiddleware);

var _webpackHotMiddleware = require('webpack-hot-middleware');

var _webpackHotMiddleware2 = _interopRequireDefault(_webpackHotMiddleware);

var _connectHistoryApiFallback = require('connect-history-api-fallback');

var _connectHistoryApiFallback2 = _interopRequireDefault(_connectHistoryApiFallback);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function startServer(_ref) {
  var _ref$srcDir = _ref.srcDir;
  var srcDir = _ref$srcDir === undefined ? 'src' : _ref$srcDir;
  var _ref$pushState = _ref.pushState;
  var pushState = _ref$pushState === undefined ? true : _ref$pushState;
  var _ref$browserSyncConfi = _ref.browserSyncConfig;
  var browserSyncConfig = _ref$browserSyncConfi === undefined ? {} : _ref$browserSyncConfi;
  var _ref$hot = _ref.hot;
  var hot = _ref$hot === undefined ? true : _ref$hot;
  var webpackConfig = _ref.webpackConfig;
  var _ref$devMiddlewareCon = _ref.devMiddlewareConfig;
  var devMiddlewareConfig = _ref$devMiddlewareCon === undefined ? {} : _ref$devMiddlewareCon;

  var bundler = (0, _webpack2.default)(webpackConfig);

  var middleware = [(0, _webpackDevMiddleware2.default)(bundler, _extends({
    publicPath: webpackConfig.output.publicPath,
    stats: {
      colors: true
    },
    noInfo: true
  }, devMiddlewareConfig))];

  if (pushState) {
    middleware.unshift((0, _connectHistoryApiFallback2.default)());
  }

  if (hot) {
    middleware.push((0, _webpackHotMiddleware2.default)(bundler));
  }

  (0, _browserSync2.default)(_extends({
    server: {
      baseDir: srcDir,
      middleware: middleware
    },

    // no need to watch '*.js' here, webpack will take care of it for us,
    // including full page reloads if HMR won't work
    files: [srcDir + '/*.html']

  }, browserSyncConfig));
}

module.exports = startServer;